class node{
    public:
    int data;
    node *next;
    node(int data){
        this -> data = data;
        next=nullptr;
    }
};

node *merge(node *head1,node *head2){
    node *temp2=NULL;
    
    
    if ((head1->data)<(head2->data)){
       temp2=head1;
       head1=head1->next;
    }
    else{
    temp2=head2;
    head2=head2->next;
    }
    node *temp1=temp2;
    while (head1!=NULL && head2!=NULL)
    {
        if ((head1->data)<(head2->data))
        {
       
           temp1->next=head1;
           temp1=temp1->next;
           head1=head1->next;
        }

        else{
        
           temp1->next=head2;
           temp1=temp1->next;
           head2=head2->next;
        }

        
    }
    if (head1!=NULL)
    {
        temp1->next=head1;
    }
     else if (head2!=NULL)
    {
        temp1->next=head2;
    }
    
    return temp2;
    
}
node *mergeSort(node *head1,int length){
    int count=1;
    node *temp=head1;
    if (length==1)
    {
        return head1;
    }
    while (count!=length/2)
    {
       temp=temp->next;
       count++;
    }
    node *a=temp->next;
    temp->next=NULL;
    node *left=mergeSort(head1,length/2);
    node *right=mergeSort(a,length/2);
    node *final=merge(left,right);
    return final;
    
}
